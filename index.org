
#+title: Saving for Retirement
#+author: Matt Brigida, Ph.D.
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup


* Annuity Retirement Model

Say as your retirement plan you intend to put $5000 per year, for the next 20 years, into a retirement account.  Further, you expect this account to earn 8% per year.  In this case your savings plan is in the form of an *annuity*.

#+BEGIN_QUOTE
Annuity: a security with a fixed cash flow every period for a fixed number of periods.
#+END_QUOTE

In your retirement plan $5000 is the fixed cash flow, the period is yearly, and the number of periods is 20.  

** Future Value

To calculate how much we'll have in our retirement account we can (1) use a convenient annuity formula, or (2) find the future value of each individual cash flow and sum these future values.

*** Using an Annuity Formula

We can calculate how much money you will have in your account at the end of year 20 with the following /future value of an annuity/ formula:

$FVA = C\left(\frac{(1 + r)^n - 1}{r}\right)$

where /FVA/ denotes the future value of the annuity, /C/ is the cash flow per period, /r/ is the interest rate per period, and /n/ is the number of periods.

Using this formula you can calculate how much money you will have in 20 years:

$FVA = 5000\left(\frac{(1 + 0.08)^20 - 1}{0.08}\right) = 228809.8$

So you will have $228,809.90 in your retirement account in 20 years.

*** Future Value of Each Cash Flow 

Annuity formulas were much more useful prior to widespread use of spreadsheets and programming languages.  

**** Spreadsheet

The following table shows how you can organize a spreadsheet to find the future value of the annuity.  The formula in the future value column is:

$FV = C(1 + r)^{(20 - t)}$

|----------+----------------+-------------------+--------------|
| Time (t) | Cash Flow (cf) | Interest Rate (r) | FV @ year 20 |
|----------+----------------+-------------------+--------------|
|        1 |           5000 |              0.08 |    21578.505 |
|        2 |           5000 |              0.08 |    19980.097 |
|        3 |           5000 |              0.08 |    18500.090 |
|        4 |           5000 |              0.08 |    17129.713 |
|        5 |           5000 |              0.08 |    15860.846 |
|        6 |           5000 |              0.08 |    14685.968 |
|        7 |           5000 |              0.08 |    13598.119 |
|        8 |           5000 |              0.08 |    12590.851 |
|        9 |           5000 |              0.08 |    11658.195 |
|       10 |           5000 |              0.08 |    10794.625 |
|       11 |           5000 |              0.08 |    9995.0231 |
|       12 |           5000 |              0.08 |    9254.6511 |
|       13 |           5000 |              0.08 |    8569.1213 |
|       14 |           5000 |              0.08 |    7934.3716 |
|       15 |           5000 |              0.08 |    7346.6404 |
|       16 |           5000 |              0.08 |    6802.4448 |
|       17 |           5000 |              0.08 |      6298.56 |
|       18 |           5000 |              0.08 |        5832. |
|       19 |           5000 |              0.08 |        5400. |
|       20 |           5000 |              0.08 |        5000. |
|----------+----------------+-------------------+--------------|
|          |                | FVA  =            |    228809.82 |
|----------+----------------+-------------------+--------------|
#+TBLFM: $2=@2$2::$3=@2$3::$4=vsum(@2..@21)

**** Loop

#+BEGIN_SRC python :exports both
cf = 5000
r = 0.08
n = 20

fva = 0
for n in range(n):
    fva += cf * (1 + r)**(n)

return fva
#+END_SRC

#+RESULTS:
: 228809.82149058158

Note range(n) gives you 0, 1, ... , n-1 which is happily what we want.

**** Recursive

Here is a functional programming approach implemented in python---it uses recursion instead of the imperative style loop. It is nice because it doesn't rely on changing variables' state, which can lead to errors.  Don't worry if it doesn't make sense at this point.

#+BEGIN_SRC python :exports both
def fva(cf, r, n):
    if n - 1 == 0:
        return cf
    else:
        return cf * (1 + r)**(n - 1) + fva(cf, r, n - 1)

return fva(5000, 0.08, 20)
#+END_SRC

#+RESULTS:
: 228809.82149058158

Same approach in R.  

#+BEGIN_SRC R :exports both
fva <- function(cf, r, n){
    if(n - 1 == 0){
        cf
    } else {
        cf * (1 + r)^(n - 1) + fva(cf, r, n - 1)
    }
}

fva(5000, 0.08, 20)
#+END_SRC

#+RESULTS:
: 228809.821490582



** Interactive App

The following app will calculate OCF for any company you choose.  

- Note how different OCF can be from Net Income.


#+BEGIN_EXPORT html

  <style>
   .slidecontainer {
  width: 100%; /* Width of the outside container */
}

/* The slider itself */
.slider {
  -webkit-appearance: none;  /* Override default CSS styles */
  appearance: none;
  width: 100%; /* Full-width */
  height: 25px; /* Specified height */
  background: #d3d3d3; /* Grey background */
  outline: none; /* Remove outline */
  opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */
  -webkit-transition: .2s; /* 0.2 seconds transition on hover */
  transition: opacity .2s;
}

/* Mouse-over effects */
.slider:hover {
  opacity: 1; /* Fully shown on mouse-over */
}

/* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */
.slider::-webkit-slider-thumb {
  -webkit-appearance: none; /* Override default look */
  appearance: none;
  width: 25px; /* Set a specific slider handle width */
  height: 25px; /* Slider handle height */
  background: #4CAF50; /* Green background */
  cursor: pointer; /* Cursor on hover */
}

.slider::-moz-range-thumb {
  width: 25px; /* Set a specific slider handle width */
  height: 25px; /* Slider handle height */
  background: #4CAF50; /* Green background */
  cursor: pointer; /* Cursor on hover */
} 

table {
  font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}
  </style>



  <center><h2>Future Value of an Annuity Calculator:</h2></center>
<div class="slidecontainer">
  <input type="range" min="100" max="10000" value="5000" class="slider" id="cf" step="100">
  <p align="center"><b>Cash Flow: <span id="cf_out"></b></span></p>  
  <input type="range" min="0.00" max="100.00" value="50" class="slider" id="r">
  <p align="center"><b>Interest Rate per Period: <span id="r_out">%</b></span></p>  
  <input type="range" min="1" max="25" value="5" class="slider" id="n">
  <p align="center"><b>Number of Periods: <span id="n_out"></b></span></p>  
</div>

<center><button onclick="myJsFunction()">Calculate</button></center>
<br>
<br>
<center>
The <b>future value of the annuity is $<span id="fva"></span></b>
</center>
<br>
<br>
<hr>
<!---
<center>
<br>
<table>
  <tr>
    <th>Cash Flow</th>
    <th><span id="cf_table"></span></th>
  </tr>
  <tr>
    <th>Interest Rate</th>
    <th><span id="r_table"></span></th>
  </tr>
  <tr>
    <th>Number of Periods</th>
    <th><span id="n_table"></span></th>
  </tr>
  <tr>
    <th>Future Value of the Annuity</th>
    <th><span id="fva"></span></th>
  </tr>
</table>
</center>
-->
    <script src="src/app1.js"></script>

#+END_EXPORT


** Solving for the Number of Periods

You may also want to know how long you have to save for retirement until you hit a particular goal amount.  

*** Using the FV Annuity Formula

We can rearrange our future value of an annuity formula for n:

$FVA = C\left(\frac{(1 + r)^n - 1}{r}\right)$

becomes:

$(1 + r)^n = \frac{FVA(r)}{C} + 1 = \frac{FVA(r) + C}{C}$

and taking logs:

$n = \frac{ln\left(\frac{FVA(r) + C}{C}\right)}{ln(1 + r)}$

So, say we wanted to have $400,000 in our account at retirement.  Then we have to save for:

$n = \frac{ln\left(\frac{400,000(0.08) + 5000}{5000}\right)}{ln(1 + 0.08)} = 26\ years$


# ** Using Python

# Add Python approach.


** Solving for r


* Growing Annuity Retirement Model

A possibly unrealistic feature of using an annuity to model your retirement savings is its assumption that you make constant retirement payments. It is more likely that you will increase your payments over time as your salary increases. In this case we can calculate your retirement savings using the future value of a *Growing Annuity*.  The formula is:





* Credits and Collaboration

[[https://github.com/financial-education/operating_cash_flow][The code is here and pull requests are welcome.]]
 

