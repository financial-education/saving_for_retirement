
#+title: Saving for Retirement
#+author: Matt Brigida, Ph.D.
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup


* Annuity Retirement Plan

Say as your retirement plan you intend to put $5000 per year, for the next 20 years, into a retirement account.  Further, you expect this account to earn 8% per year.  In this case your savings plan is in the form of an *annuity*.

#+BEGIN_QUOTE
Annuity: a security with a fixed cash flow every period for a fixed number of periods.
#+END_QUOTE

In your retirement plan $5000 is the fixed cash flow, the period is yearly, and the number of periods is 20.  

** Future Value

To calculate how much we'll have in our retirement account we can (1) use a convenient annuity formula, or (2) find the future value of each individual cash flow and sum these future values.

*** Annuity

We can calculate how much money you will have in your account at the end of year 20 with the following /future value of an annuity/ formula:

$FVA = C\left(\frac{(1 + r)^n - 1}{r}\right)$

where /FVA/ denotes the future value of the annuity, /C/ is the cash flow per period, /r/ is the interest rate per period, and /n/ is the number of periods.

Using this formula you can calculate how much money you will have in 20 years:

$FVA = 5000\left(\frac{(1 + 0.08)^20 - 1}{0.08}\right) = 228809.8$

So you will have $228,809.90 in your retirement account in 20 years.

*** Future Value of Each Cash Flow 

Here is a functional programming approach implemented in python---it uses recursion instead of the imperative style loop. Don't worry if it doesn't make sense at this point.

#+BEGIN_SRC python
def fva(cf, r, n):
    if n - 1 == 0:
        return cf
    else:
        return cf * (1 + r)**(n - 1) + fva(cf, r, n - 1)

return fva(5000, 0.08, 20)
#+END_SRC

#+RESULTS:
: 228809.82149058158

Same approach in R.  

#+BEGIN_SRC R
fva <- function(cf, r, n){
    if(n - 1 == 0){
        cf
    } else {
        cf * (1 + r)^(n - 1) + fva(cf, r, n - 1)
    }
}

fva(5000, 0.08, 20)
#+END_SRC

#+RESULTS:
: 228809.821490582



* Interactive App

The following app will calculate OCF for any company you choose.  

- Note how different OCF can be from Net Income.


#+BEGIN_EXPORT html

  <style>
   .slidecontainer {
  width: 100%; /* Width of the outside container */
}

/* The slider itself */
.slider {
  -webkit-appearance: none;  /* Override default CSS styles */
  appearance: none;
  width: 100%; /* Full-width */
  height: 25px; /* Specified height */
  background: #d3d3d3; /* Grey background */
  outline: none; /* Remove outline */
  opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */
  -webkit-transition: .2s; /* 0.2 seconds transition on hover */
  transition: opacity .2s;
}

/* Mouse-over effects */
.slider:hover {
  opacity: 1; /* Fully shown on mouse-over */
}

/* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */
.slider::-webkit-slider-thumb {
  -webkit-appearance: none; /* Override default look */
  appearance: none;
  width: 25px; /* Set a specific slider handle width */
  height: 25px; /* Slider handle height */
  background: #4CAF50; /* Green background */
  cursor: pointer; /* Cursor on hover */
}

.slider::-moz-range-thumb {
  width: 25px; /* Set a specific slider handle width */
  height: 25px; /* Slider handle height */
  background: #4CAF50; /* Green background */
  cursor: pointer; /* Cursor on hover */
} 

table {
  font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}
  </style>



  <center><h2>OCF Calculator:</h2></center>
<div class="slidecontainer">
  <input type="range" min="0" max="100" value="50" class="slider" id="sales">
  <p align="center"><b>Sales: <span id="sales_out"></b></span></p>  
  <input type="range" min="0" max="100" value="50" class="slider" id="costs">
  <p align="center"><b>Costs: <span id="costs_out"></b></span></p>  
  <input type="range" min="0" max="100" value="50" class="slider" id="depreciation">
  <p align="center"><b>Depreciation: <span id="depreciation_out"></b></span></p>  
  <input type="range" min="0" max="100" value="40" class="slider" id="tax_rate">
  <p align="center"><b>Tax Rate: <span id="tax_rate_out">%</b></span></p>  
</div>

<center><button onclick="myJsFunction()">Calculate</button></center>
<center>
<br>
<table>
  <tr>
    <th>Sales</th>
    <th><span id="sales_table"></span></th>
  </tr>
  <tr>
    <th>Costs</th>
    <th><span id="costs_table"></span></th>
  </tr>
  <tr>
    <th>Depreciation</th>
    <th><span id="depreciation_table"></span></th>
  </tr>
  <tr>
    <th>EBIT</th>
    <th><span id="ebit"></span></th>
  </tr>
  <tr>
    <th>Taxes</th>
    <th><span id="taxes"></span></th>
  </tr>
  <tr>
    <th>OCF</th>
    <th><span id="ocf"></span></th>
  </tr>
</table>
</center>

    <script src="src/app1.js"></script>

#+END_EXPORT


 

* Credits and Collaboration

[[https://github.com/financial-education/operating_cash_flow][The code is here and pull requests are welcome.]]
 

